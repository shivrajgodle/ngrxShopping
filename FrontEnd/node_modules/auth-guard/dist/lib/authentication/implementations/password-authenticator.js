"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordAuthenticator = void 0;
var tslib_1 = require("tslib");
var base_authenticator_1 = require("./base-authenticator");
var errors_1 = require("../../core/errors");
var authentication_types_1 = require("../../core/models/authentication-types");
var PasswordAuthenticator = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordAuthenticator, _super);
    function PasswordAuthenticator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasswordAuthenticator.prototype.prepareAuthenticationType = function (user, value) {
        if (!value) {
            throw new errors_1.RegisterException(authentication_types_1.AuthenticationType.PASSWORD);
        }
        this.logger.log("Speichere Passwort " + value + ".");
        user.password = value;
        return user;
    };
    PasswordAuthenticator.prototype.isAuthenticationTypeMissing = function (user, value) {
        this.logger.debug("Check a new user with user userId: " + user.userId + ": ", user);
        this.logger.log('Ein Passwort ist erforderlich.');
        if (!value) {
            this.logger.debug('Password not provided!');
            return { missing: true };
        }
        this.logger.log("Passwort \"" + value + "\" erhalten. Passwort \"" + user.password + "\" wurde erwartet.");
        if (user.password !== value) {
            this.logger.debug("Password does not match. Received: " + value + " -- Expected: " + user.password + ".");
            throw new errors_1.AuthenticationException('Username or password is incorrect.');
        }
        return { missing: false };
    };
    return PasswordAuthenticator;
}(base_authenticator_1.BaseAuthenticator));
exports.PasswordAuthenticator = PasswordAuthenticator;
