"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TotpAuthenticator = void 0;
var tslib_1 = require("tslib");
var base_authenticator_1 = require("./base-authenticator");
var authentication_1 = require("../authentication");
var errors_1 = require("../../core/errors");
var authentication_types_1 = require("../../core/models/authentication-types");
var TotpAuthenticator = /** @class */ (function (_super) {
    tslib_1.__extends(TotpAuthenticator, _super);
    function TotpAuthenticator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TotpAuthenticator.prototype.prepareAuthenticationType = function (user, value) {
        if (!value) {
            throw new errors_1.RegisterException(authentication_types_1.AuthenticationType.TOTP);
        }
        this.logger.log("Speichere totp-URI:", value);
        user.totp = { raw: value };
        return user;
    };
    TotpAuthenticator.prototype.isAuthenticationTypeMissing = function (user, value) {
        if (!value) {
            this.logger.log('FÃ¼r eine Authentifizierung ist ein TOTP erforderlich.');
            this.prepareTotpAuthentication(user);
            return { missing: true };
        }
        this.logger.log("TOTP \"" + value + "\" erhalten. \u00DCberpr\u00FCfe dessen Richtigkeit.");
        var pendingUser = this.currentlyPendingUsers.get(user.userId);
        var otpValues = authentication_1.Authentication.uriToOtp(pendingUser === null || pendingUser === void 0 ? void 0 : pendingUser.totp.raw);
        if (!this.totpService.verify(value, otpValues.secret)) {
            throw new errors_1.AuthenticationException('TOTP codes do not match!');
        }
        this.doCleanUp(user.userId);
        return { missing: false };
    };
    TotpAuthenticator.prototype.prepareTotpAuthentication = function (user) {
        if (!user.totp) {
            throw new errors_1.AuthenticationException("User " + user.username + " has to create a totp-uri, first!");
        }
        var otpValues = authentication_1.Authentication.uriToOtp(user.totp.raw);
        var totp = this.totpService.create(otpValues.secret);
        user.totp.totp = totp;
        this.registerPendingUser(user);
    };
    return TotpAuthenticator;
}(base_authenticator_1.BaseAuthenticator));
exports.TotpAuthenticator = TotpAuthenticator;
