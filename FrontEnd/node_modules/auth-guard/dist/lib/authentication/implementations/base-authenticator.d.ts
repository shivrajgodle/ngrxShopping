import { HotpService, TotpService } from 'final-otp';
import { ILogger } from '../../util';
import { Authenticator, AuthenticatorValidationResult } from '../interfaces/authenticator';
import { IUser } from './../../core/models/user';
export declare abstract class BaseAuthenticator implements Authenticator {
    protected hotpService: typeof HotpService;
    protected totpService: typeof TotpService;
    protected currentlyPendingUsers: Map<string, IUser>;
    protected logger: ILogger;
    constructor(logger: ILogger);
    abstract prepareAuthenticationType(user: IUser, value?: any): IUser;
    abstract isAuthenticationTypeMissing(user: IUser, value?: string): AuthenticatorValidationResult;
    protected registerPendingUser(user: IUser): void;
    protected doCleanUp(userId: string): void;
}
