"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailAuthenticator = void 0;
var tslib_1 = require("tslib");
var sendmail_1 = tslib_1.__importDefault(require("sendmail"));
var base_authenticator_1 = require("./base-authenticator");
var helper_1 = require("../../helper");
var authentication_exception_1 = require("../../core/errors/authentication-exception");
var errors_1 = require("../../core/errors");
var authentication_types_1 = require("../../core/models/authentication-types");
var EmailAuthenticator = /** @class */ (function (_super) {
    tslib_1.__extends(EmailAuthenticator, _super);
    function EmailAuthenticator(logger, options) {
        var _this = _super.call(this, logger) || this;
        _this.sendMailFn = sendmail_1.default({});
        _this.domain = options.domain;
        return _this;
    }
    EmailAuthenticator.prototype.prepareAuthenticationType = function (user, value) {
        if (!value) {
            throw new errors_1.RegisterException(authentication_types_1.AuthenticationType.EMAIL);
        }
        this.logger.log("Speichere E-Mail-Adresse " + value + ".");
        user.email = { email: value };
        return user;
    };
    EmailAuthenticator.prototype.isAuthenticationTypeMissing = function (user, value) {
        if (!value) {
            this.prepareEmailAuthentication(user);
            return { missing: true };
        }
        var pendingUser = this.currentlyPendingUsers.get(user.userId);
        var hotp = pendingUser === null || pendingUser === void 0 ? void 0 : pendingUser.email.hotp;
        this.logger.log("HOTP \"" + value + "\" erhalten. HOTP \"" + hotp.value + "\" erwartet.");
        if (!hotp.verify(value)) {
            throw new authentication_exception_1.AuthenticationException('Email code is not correct!');
        }
        return { missing: false };
    };
    EmailAuthenticator.prototype.prepareEmailAuthentication = function (user) {
        var hotp = this.hotpService.create(user.email.emailSecret || helper_1.Random.cryptoKey(), helper_1.Random.randomNumber(8), {
            expiresIn: 600000
        });
        user.email.hotp = hotp;
        this.sendEmailWithHotp(user.email.email, hotp.value);
    };
    EmailAuthenticator.prototype.sendEmailWithHotp = function (email, hotp) {
        var _this = this;
        this.logger.log("Sende an " + email + " eine E-Mail mit folgendem HOTP: " + hotp);
        this.sendMailFn({
            from: this.domain,
            to: email,
            subject: 'Best√§tigung einer Authentifizierung',
            html: "Ihr Best\u00E4tigungs-Code lautet: " + hotp + "\n\r\n\rDieser Code ist zehn Minuten lang g\u00FCltig."
        }, function (err, reply) {
            if (err) {
                _this.logger.error(err);
            }
            _this.logger.debug(reply);
        });
    };
    return EmailAuthenticator;
}(base_authenticator_1.BaseAuthenticator));
exports.EmailAuthenticator = EmailAuthenticator;
