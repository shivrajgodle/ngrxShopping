import { AuthenticatorProvider } from './authenticator-provider';
import { AuthenticationCredential } from '../lib/core/models/authentication-credential';
import { IUser } from '../lib/core/models/user';
import { AuthenticationType } from '../lib/core/models/authentication-types';
import { ILogger } from '../lib/util';
/**
 * Describes what information could be passed to the `AuthGuard`.
 */
export interface AuthenticationServerOptions {
    /**
     * Customizes output.
     */
    logger?: Partial<ILogger>;
    /**
     * Sets a domain, emails will go from.
     * Defaults to `authentication-server@example.com`.
     */
    domain?: string;
    /**
     * Sets a list of origins, that will be accepted by the fido-authenticator.
     * Defaults to `localhost:8000`.
     */
    expectedOrigins?: string | string[];
}
export declare class AuthGuard implements AuthenticatorProvider {
    private authenticators;
    private readonly logger;
    private readonly domain;
    private readonly expectedOrigins;
    constructor(options: AuthenticationServerOptions);
    register(user: IUser, values?: AuthenticationCredential): IUser;
    login(user: IUser, values: AuthenticationCredential): void;
    getAvailableAuthenticators(): AuthenticationType[];
    private initAuthenticators;
}
