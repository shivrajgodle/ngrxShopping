import * as i0 from '@angular/core';
import { Component, Input, HostListener, EventEmitter, Output, Injectable, NgModule } from '@angular/core';
import * as i1 from '@angular/material/form-field';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i2 from '@angular/material/icon';
import { MatIconModule } from '@angular/material/icon';
import * as i3 from '@angular/material/input';
import { MatInputModule } from '@angular/material/input';
import * as i4 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i1$1 from '@angular/material/button';
import { MatButtonModule } from '@angular/material/button';

class CCInputBoxComponent {
    constructor() { }
    ngOnInit() {
    }
    onKeyDown(event) {
        const input = event.target;
        let trimmed = input.value.replace(/\s+/g, '');
        if (trimmed.length > 16) {
            trimmed = trimmed.substr(0, 16);
        }
        let numbers = [];
        for (let i = 0; i < trimmed.length; i += 4) {
            numbers.push(trimmed.substr(i, 4));
        }
        input.value = numbers.join(' ');
    }
}
CCInputBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CCInputBoxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CCInputBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CCInputBoxComponent, selector: "lib-ccinput-box", inputs: { placeholderText: "placeholderText", cardNumber: "cardNumber", iconText: "iconText" }, host: { listeners: { "input": "onKeyDown($event)" } }, ngImport: i0, template: "\n\n<mat-form-field appearance=\"standard\">\n  <input matInput formControlName=\"{{cardNumber}}\" type=\"text\"  placeholder=\"{{placeholderText}}\" credit-card>\n  <mat-icon matSuffix>{{iconText}}</mat-icon>\n\n</mat-form-field>\n\n\n\n\n\n\n", styles: ["mat-card{width:100%}mat-card-header{border-bottom:1px solid #000;padding:30px 30px 10px;width:250px;text-align:center;background-color:#00ff7f}mat-card-content{margin-top:10px;width:100%}img{width:100px;height:120px}.add_product{font-size:35px;font-weight:450;padding:10px;text-align:center}form{background-color:#fff;text-align:center;padding:0}button,form{border:1px solid #000}button{width:40px;margin-top:10px}input{background-color:#fff;font-size:18px}.space{margin-bottom:0}@media (min-width:768px){form{border:1px solid #000;background-color:#fff;text-align:center;padding:0}mat-card-header{border-bottom:1px solid #000;padding:30px 30px 10px;width:650px;background-color:#00ff7f}mat-card-content{margin-top:10px}mat-form-field{width:550px}button{width:90px;text-align:right;margin-right:30px}}.invisible{display:block;visibility:hidden;height:0;width:0}.month,.year{width:70px;text-align:center}.cvv{width:50px;text-align:center}.payment{border-style:dashed;width:95%;margin-left:5px;border-radius:20px}.icons{padding:0 30px}"], components: [{ type: i1.MatFormField, selector: "mat-form-field", inputs: ["color", "floatLabel", "appearance", "hideRequiredMarker", "hintLabel"], exportAs: ["matFormField"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["id", "disabled", "required", "type", "value", "readonly", "placeholder", "errorStateMatcher", "aria-describedby"], exportAs: ["matInput"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.MatSuffix, selector: "[matSuffix]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CCInputBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-ccinput-box',
                    templateUrl: './ccinput-box.component.html',
                    styleUrls: ['./ccinput-box.component.css']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { placeholderText: [{
                type: Input
            }], cardNumber: [{
                type: Input
            }], iconText: [{
                type: Input
            }], onKeyDown: [{
                type: HostListener,
                args: ['input', ['$event']]
            }] } });

class ButtionComponent {
    // @Output() buttonClickEmit: EventEmitter<string> = new EventEmitter<string>();
    constructor() { }
    ngOnInit() {
    }
    onButtonClick() {
        // this.buttonClickEmit.emit('you have clicked on button');
    }
}
ButtionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ButtionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ButtionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ButtionComponent, selector: "lib-buttion", inputs: { buttonText: "buttonText", iconName: "iconName" }, ngImport: i0, template: "\n\n\n\n<button type=\"button\" (click)=\"onButtonClick()\" mat-raised-button color=\"primary\">\n\n  {{buttonText}}\n\n  <mat-icon>{{iconName}} </mat-icon>\n\n</button>\n\n\n", styles: [""], components: [{ type: i1$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ButtionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-buttion',
                    templateUrl: './buttion.component.html',
                    styleUrls: ['./buttion.component.css']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { buttonText: [{
                type: Input
            }], iconName: [{
                type: Input
            }] } });

class CounterComponent {
    constructor() {
        this.countChanged = new EventEmitter();
        this.clickCount = 0;
    }
    ngOnInit() {
    }
    onPlusClick() {
        this.clickCount++;
        this.countChanged.emit(this.clickCount);
    }
    onMinusClick() {
        this.clickCount--;
        this.countChanged.emit(this.clickCount);
    }
}
CounterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CounterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CounterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CounterComponent, selector: "lib-counter", outputs: { countChanged: "countChanged" }, ngImport: i0, template: "\n\n\n  <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\" (click)=\"onPlusClick()\">\n    <mat-icon>add</mat-icon>\n  </button>\n  \n  <input type=\"text\" readonly class=\"counter\" value=\"{{clickCount}}\">\n\n  <button mat-mini-fab color=\"accent\" aria-label=\"Example icon button with a plus one icon\" (click)=\"onMinusClick()\">\n    <mat-icon>remove</mat-icon>\n  </button>\n", styles: [".counter{text-align:center;background-color:#fff;width:50px;height:33.5px;border-top:1px solid #000;border-bottom:1px solid #000}"], components: [{ type: i1$1.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CounterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-counter',
                    templateUrl: './counter.component.html',
                    styleUrls: ['./counter.component.css']
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { countChanged: [{
                type: Output
            }] } });

class MydemoLibService {
    constructor() { }
}
MydemoLibService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MydemoLibService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class MydemoLibComponent {
    constructor() { }
    ngOnInit() {
    }
}
MydemoLibComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MydemoLibComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: MydemoLibComponent, selector: "lib-mydemo-lib", ngImport: i0, template: `
    <p>
      mydemo-lib works!
    </p>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-mydemo-lib',
                    template: `
    <p>
      mydemo-lib works!
    </p>
  `,
                    styles: []
                }]
        }], ctorParameters: function () { return []; } });

class MydemoLibModule {
}
MydemoLibModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MydemoLibModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibModule, declarations: [MydemoLibComponent,
        CounterComponent,
        ButtionComponent,
        CCInputBoxComponent], imports: [MatButtonModule,
        MatIconModule,
        MatFormFieldModule,
        ReactiveFormsModule,
        MatInputModule], exports: [MydemoLibComponent, CounterComponent, ButtionComponent, CCInputBoxComponent] });
MydemoLibModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibModule, imports: [[
            MatButtonModule,
            MatIconModule,
            MatFormFieldModule,
            ReactiveFormsModule,
            MatInputModule
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: MydemoLibModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        MydemoLibComponent,
                        CounterComponent,
                        ButtionComponent,
                        CCInputBoxComponent
                    ],
                    imports: [
                        MatButtonModule,
                        MatIconModule,
                        MatFormFieldModule,
                        ReactiveFormsModule,
                        MatInputModule
                    ],
                    exports: [
                        MydemoLibComponent, CounterComponent, ButtionComponent, CCInputBoxComponent
                    ]
                }]
        }] });

/*
 * Public API Surface of mydemo-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ButtionComponent, CCInputBoxComponent, CounterComponent, MydemoLibComponent, MydemoLibModule, MydemoLibService };
//# sourceMappingURL=shivrajgodle-mydemo-lib.js.map
