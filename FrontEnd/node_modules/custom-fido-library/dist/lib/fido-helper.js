"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FidoHelper = void 0;
var tslib_1 = require("tslib");
var base_coding_1 = require("base-coding");
var cbor_1 = tslib_1.__importDefault(require("cbor"));
var crypto_1 = tslib_1.__importDefault(require("crypto"));
var cose_to_jwk_1 = require("./cose-to-jwk");
var parse_auth_data_1 = require("./parse-auth-data");
var FidoHelper;
(function (FidoHelper) {
    function parseAuthData(buffer) {
        return parse_auth_data_1.parseAuthData(buffer);
    }
    FidoHelper.parseAuthData = parseAuthData;
    function coseToJwk(cose) {
        return cose_to_jwk_1.Cose.coseToJwk(cose);
    }
    FidoHelper.coseToJwk = coseToJwk;
    function randomNumber(length) {
        if (length === void 0) { length = 32; }
        return crypto_1.default
            .randomBytes(Math.ceil(length / 2))
            .toString('hex')
            .slice(0, length);
    }
    FidoHelper.randomNumber = randomNumber;
    function decodeAttestation(credential) {
        var attestationObject = credential.response.attestationObject;
        var attestationObjectBuffer = Buffer.from(attestationObject, 'base64');
        var ctapMakeCredResponse = cbor_1.default.decodeAllSync(attestationObjectBuffer)[0];
        return FidoHelper.decode(credential.response.clientDataJSON, ctapMakeCredResponse.authData);
    }
    FidoHelper.decodeAttestation = decodeAttestation;
    function decode(jsonToParse, authDataToParse) {
        var clientData = JSON.parse(base_coding_1.Base64.decode(jsonToParse));
        if (typeof authDataToParse === 'string') {
            authDataToParse = Buffer.from(authDataToParse, 'base64');
        }
        var authData = FidoHelper.parseAuthData(authDataToParse);
        return { clientData: clientData, authData: authData };
    }
    FidoHelper.decode = decode;
    function fromBufferToArrayBuffer(buffer) {
        if (!buffer) {
            return new ArrayBuffer(0);
        }
        var ab = new ArrayBuffer(buffer.length);
        var view = new Uint8Array(ab);
        for (var index = 0; index < buffer.length; ++index) {
            view[index] = buffer[index];
        }
        return ab;
    }
    FidoHelper.fromBufferToArrayBuffer = fromBufferToArrayBuffer;
    function createChallenge() {
        return stringToBase64Buffer(FidoHelper.randomNumber());
    }
    FidoHelper.createChallenge = createChallenge;
    function trimBase64(input) {
        var indexOfPadding = input.indexOf('=');
        return input.slice(0, indexOfPadding);
    }
    FidoHelper.trimBase64 = trimBase64;
    function stringToBase64Buffer(buffer) {
        return Buffer.from(Uint8Array.from(buffer, function (c) { return c.charCodeAt(0); })).toString('base64');
    }
})(FidoHelper = exports.FidoHelper || (exports.FidoHelper = {}));
