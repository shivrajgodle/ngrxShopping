"use strict";
/*
 * https://github.com/apowers313/cose-to-jwk
 *
 * Copyright (c) 2018 Adam Powers
 * Licensed under the MIT license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cose = void 0;
var tslib_1 = require("tslib");
var cbor_1 = tslib_1.__importDefault(require("cbor"));
var Cose;
(function (Cose) {
    function coseToJwk(cose) {
        if (typeof cose !== 'object') {
            throw new TypeError("'cose' argument must be an object, probably an Buffer containing valid COSE");
        }
        // convert Uint8Array, etc. to ArrayBuffer
        if (cose.buffer instanceof ArrayBuffer && !(cose instanceof Buffer)) {
            cose = cose.buffer;
        }
        if (Array.isArray(cose)) {
            cose = Buffer.from(cose);
        }
        // convert ArrayBuffer to Buffer
        if (cose instanceof ArrayBuffer) {
            cose = Buffer.from(new Uint8Array(cose));
        }
        if (!(cose instanceof Buffer)) {
            throw new TypeError("could not convert 'cose' argument to a Buffer");
        }
        if (cose.length < 3) {
            throw new RangeError("COSE buffer was too short: " + cose.length);
        }
        var parsedCose;
        try {
            parsedCose = cbor_1.default.decodeAllSync(Buffer.from(cose));
        }
        catch (err) {
            throw new Error("couldn't parse authenticator.authData.attestationData CBOR: " + err);
        }
        if (!Array.isArray(parsedCose) || !(parsedCose[0] instanceof Map)) {
            throw new Error('invalid parsing of authenticator.authData.attestationData CBOR');
        }
        var coseMap = parsedCose[0];
        var extraMap = new Map();
        var retKey = {};
        // parse main COSE labels
        coseMap.forEach(function (rawValue, rawKey) {
            var key = rawKey.toString();
            var value = rawValue.toString();
            if (!coseLabels[key]) {
                extraMap.set(rawKey, rawValue);
                return;
            }
            var name = coseLabels[key].name;
            if (coseLabels[key].values[value]) {
                value = coseLabels[key].values[value];
            }
            retKey[name] = value;
        });
        var keyParams = keyParamList[retKey.kty];
        // parse key-specific parameters
        extraMap.forEach(function (value, key) {
            key = key.toString();
            if (!keyParams[key]) {
                throw new Error("unknown COSE key label: " + retKey.kty + " " + key);
            }
            var name = keyParams[key].name;
            if (keyParams[key].values) {
                value = keyParams[key].values[value.toString()];
            }
            if (value instanceof Buffer) {
                value = value.toString('base64');
            }
            retKey[name] = value;
        });
        return retKey;
    }
    Cose.coseToJwk = coseToJwk;
    // main COSE labels
    // defined here: https://tools.ietf.org/html/rfc8152#section-7.1
    var coseLabels = {
        1: {
            name: 'kty',
            values: {
                2: 'EC',
                3: 'RSA'
            }
        },
        2: {
            name: 'kid',
            values: {}
        },
        3: {
            name: 'alg',
            values: {
                '-7': 'ECDSA_w_SHA256',
                '-8': 'EdDSA',
                '-35': 'ECDSA_w_SHA384',
                '-36': 'ECDSA_w_SHA512',
                '-257': 'RSASSA-PKCS1-v1_5_w_SHA256',
                '-258': 'RSASSA-PKCS1-v1_5_w_SHA384',
                '-259': 'RSASSA-PKCS1-v1_5_w_SHA512',
                '-65535': 'RSASSA-PKCS1-v1_5_w_SHA1'
            }
        },
        4: {
            name: 'key_ops',
            values: {}
        },
        5: {
            name: 'base_iv',
            values: {}
        }
    };
    // key-specific parameters
    var keyParamList = {
        // ECDSA key parameters
        // defined here: https://tools.ietf.org/html/rfc8152#section-13.1.1
        EC: {
            '-1': {
                name: 'crv',
                values: {
                    1: 'P-256',
                    2: 'P-384',
                    3: 'P-521',
                    4: 'X25519',
                    5: 'X448',
                    6: 'Ed25519',
                    7: 'Ed448'
                }
            },
            '-2': {
                name: 'x'
                // value = Buffer
            },
            '-3': {
                name: 'y'
                // value = Buffer
            },
            '-4': {
                name: 'd'
                // value = Buffer
            }
        },
        // RSA key parameters
        // defined here: https://tools.ietf.org/html/rfc8230#section-4
        RSA: {
            '-1': {
                name: 'n'
                // value = Buffer
            },
            '-2': {
                name: 'e'
                // value = Buffer
            },
            '-3': {
                name: 'd'
                // value = Buffer
            },
            '-4': {
                name: 'p'
                // value = Buffer
            },
            '-5': {
                name: 'q'
                // value = Buffer
            },
            '-6': {
                name: 'dP'
                // value = Buffer
            },
            '-7': {
                name: 'dQ'
                // value = Buffer
            },
            '-8': {
                name: 'qInv'
                // value = Buffer
            },
            '-9': {
                name: 'other'
                // value = Array
            },
            '-10': {
                name: 'r_i'
                // value = Buffer
            },
            '-11': {
                name: 'd_i'
                // value = Buffer
            },
            '-12': {
                name: 't_i'
                // value = Buffer
            }
        }
    };
})(Cose = exports.Cose || (exports.Cose = {}));
