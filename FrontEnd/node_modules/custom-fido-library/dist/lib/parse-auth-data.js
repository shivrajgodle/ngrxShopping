"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAuthData = void 0;
var vanilla_cbor_1 = require("./vanilla-cbor");
/*
 * parsing Auth Data for FIDO
 * https://medium.com/webauthnworks/verifying-fido2-responses-4691288c8770
 *
 * Copyright (c) 2018-2021 Yuriy Ackermann <ackermann.yuriy@gmail.com> <yuriy@webauthn.works>
 * Licensed under the MIT license.
 */
function parseAuthData(buffer) {
    if (buffer.byteLength < 37) {
        throw new Error('Authenticator Data must be at least 37 bytes long!');
    }
    var rpIdHash = buffer.slice(0, 32);
    buffer = buffer.slice(32);
    /* Flags */
    var flagsBuffer = buffer.slice(0, 1);
    buffer = buffer.slice(1);
    var flagsInt = flagsBuffer[0];
    var up = !!(flagsInt & 0x01); // Test of User Presence
    var uv = !!(flagsInt & 0x04); // User Verification
    var at = !!(flagsInt & 0x40); // Attestation data
    var ed = !!(flagsInt & 0x80); // Extension data
    var flags = { up: up, uv: uv, at: at, ed: ed, flagsInt: flagsInt };
    var counterBuffer = buffer.slice(0, 4);
    buffer = buffer.slice(4);
    var counter = counterBuffer.readUInt32BE(0);
    /* Attested credential data */
    var aaguid;
    var aaguidBuffer;
    var credIdBuffer;
    var cosePublicKeyBuffer;
    var attestationMinLen = 16 + 2 + 16 + 77; // aaguid + credIdLen + credId + pk
    if (at) {
        // Attested Data
        if (buffer.byteLength < attestationMinLen) {
            throw new Error("It seems as the Attestation Data flag is set, but the remaining data is smaller than " + attestationMinLen + " bytes. You might have set AT flag for the assertion response.");
        }
        aaguid = buffer.slice(0, 16).toString('hex');
        buffer = buffer.slice(16);
        aaguidBuffer = aaguid.slice(0, 8) + "-" + aaguid.slice(8, 12) + "-" + aaguid.slice(12, 16) + "-" + aaguid.slice(16, 20) + "-" + aaguid.slice(20);
        var credIdLenBuffer = buffer.slice(0, 2);
        buffer = buffer.slice(2);
        var credIdLen = credIdLenBuffer.readUInt16BE(0);
        credIdBuffer = buffer.slice(0, credIdLen);
        buffer = buffer.slice(credIdLen);
        var pubKeyLength = vanilla_cbor_1.decodeOnlyFirst(buffer).byteLength;
        cosePublicKeyBuffer = buffer.slice(0, pubKeyLength);
        buffer = buffer.slice(pubKeyLength);
    }
    var coseExtensionsDataBuffer;
    if (ed) {
        // Extension Data
        var extensionsDataLength = vanilla_cbor_1.decodeOnlyFirst(buffer).byteLength;
        coseExtensionsDataBuffer = buffer.slice(0, extensionsDataLength);
        buffer = buffer.slice(extensionsDataLength);
    }
    if (buffer.byteLength) {
        console.warn("Failed to decode authData! Leftover " + buffer.byteLength + " bytes been detected!");
        console.warn("Bytes:", buffer);
    }
    return {
        rpIdHash: rpIdHash,
        counter: counter,
        flags: flags,
        counterBuffer: counterBuffer,
        aaguid: aaguid,
        credIdBuffer: credIdBuffer,
        cosePublicKeyBuffer: cosePublicKeyBuffer,
        coseExtensionsDataBuffer: coseExtensionsDataBuffer
    };
}
exports.parseAuthData = parseAuthData;
