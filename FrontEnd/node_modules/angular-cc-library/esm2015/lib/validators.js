import { Validators } from '@angular/forms';
import { CreditCard } from './credit-card';
export class CreditCardValidators {
    static validateCCNumber(control) {
        if (Validators.required(control) !== undefined && Validators.required(control) !== null) {
            return { ccNumber: true };
        }
        const num = control.value.toString().replace(/\s+|-/g, '');
        if (!/^\d+$/.test(num)) {
            return { ccNumber: true };
        }
        const card = CreditCard.cardFromNumber(num);
        if (!card) {
            return { ccNumber: true };
        }
        if (card.length.includes(num.length) && (card.luhn === false || CreditCard.luhnCheck(num))) {
            return null;
        }
        const upperlength = card.length[card.length.length - 1];
        if (num.length > upperlength) {
            const registeredNum = num.substring(0, upperlength);
            if (CreditCard.luhnCheck(registeredNum)) {
                return null;
            }
        }
        return { ccNumber: true };
    }
    static validateExpDate(control) {
        if (Validators.required(control) !== undefined && Validators.required(control) !== null) {
            return { expDate: true };
        }
        if (typeof control.value !== 'undefined' && control.value.length >= 5) {
            let [month, year] = control.value.split(/[\s\/]+/, 2);
            if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                const prefix = new Date().getFullYear().toString().slice(0, 2);
                year = prefix + year;
            }
            month = parseInt(month, 10).toString();
            year = parseInt(year, 10).toString();
            if (/^\d+$/.test(month) && /^\d+$/.test(year) && (month >= 1 && month <= 12)) {
                const expiry = new Date(year, month);
                const currentTime = new Date();
                expiry.setMonth(expiry.getMonth() - 1);
                expiry.setMonth(expiry.getMonth() + 1, 1);
                if (expiry > currentTime) {
                    return null;
                }
            }
        }
        return { expDate: true };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWNjLWxpYnJhcnkvc3JjLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE1BQU0sT0FBTyxvQkFBb0I7SUFDeEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQXdCO1FBQ3JELElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDdkYsT0FBTyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUN6QjtRQUVELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO1NBQ3pCO1FBRUQsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU1QyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsT0FBTyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUN6QjtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQzFGLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxXQUFXLEVBQUU7WUFDNUIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDcEQsSUFBSSxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFFRCxPQUFPLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO0lBQzFCLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQXdCO1FBQ3BELElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDdkYsT0FBTyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUN4QjtRQUVELElBQUksT0FBTyxPQUFPLENBQUMsS0FBSyxLQUFLLFdBQVcsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDckUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFdEQsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3JFLE1BQU0sTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDL0QsSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7YUFDdEI7WUFFRCxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN2QyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVyQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUUsQ0FBQyxFQUFFO2dCQUM1RSxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRTFDLElBQUksTUFBTSxHQUFHLFdBQVcsRUFBRTtvQkFDeEIsT0FBTyxJQUFJLENBQUM7aUJBQ2I7YUFDRjtTQUNGO1FBRUQsT0FBTyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQztJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDcmVkaXRDYXJkIH0gZnJvbSAnLi9jcmVkaXQtY2FyZCc7XG5cbmV4cG9ydCBjbGFzcyBDcmVkaXRDYXJkVmFsaWRhdG9ycyB7XG4gIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVDQ051bWJlcihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkgIT09IHVuZGVmaW5lZCAmJiBWYWxpZGF0b3JzLnJlcXVpcmVkKGNvbnRyb2wpICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4ge2NjTnVtYmVyOiB0cnVlfTtcbiAgICB9XG5cbiAgICBjb25zdCBudW0gPSBjb250cm9sLnZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzK3wtL2csICcnKTtcblxuICAgIGlmICghL15cXGQrJC8udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4ge2NjTnVtYmVyOiB0cnVlfTtcbiAgICB9XG5cbiAgICBjb25zdCBjYXJkID0gQ3JlZGl0Q2FyZC5jYXJkRnJvbU51bWJlcihudW0pO1xuXG4gICAgaWYgKCFjYXJkKSB7XG4gICAgICByZXR1cm4ge2NjTnVtYmVyOiB0cnVlfTtcbiAgICB9XG5cbiAgICBpZiAoY2FyZC5sZW5ndGguaW5jbHVkZXMobnVtLmxlbmd0aCkgJiYgKGNhcmQubHVobiA9PT0gZmFsc2UgfHwgQ3JlZGl0Q2FyZC5sdWhuQ2hlY2sobnVtKSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHVwcGVybGVuZ3RoID0gY2FyZC5sZW5ndGhbY2FyZC5sZW5ndGgubGVuZ3RoIC0gMV07XG4gICAgaWYgKG51bS5sZW5ndGggPiB1cHBlcmxlbmd0aCkge1xuICAgICAgY29uc3QgcmVnaXN0ZXJlZE51bSA9IG51bS5zdWJzdHJpbmcoMCwgdXBwZXJsZW5ndGgpO1xuICAgICAgaWYgKENyZWRpdENhcmQubHVobkNoZWNrKHJlZ2lzdGVyZWROdW0pKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7Y2NOdW1iZXI6IHRydWV9O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZUV4cERhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGlmIChWYWxpZGF0b3JzLnJlcXVpcmVkKGNvbnRyb2wpICE9PSB1bmRlZmluZWQgJiYgVmFsaWRhdG9ycy5yZXF1aXJlZChjb250cm9sKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHtleHBEYXRlOiB0cnVlfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbnRyb2wudmFsdWUgIT09ICd1bmRlZmluZWQnICYmIGNvbnRyb2wudmFsdWUubGVuZ3RoID49IDUpIHtcbiAgICAgIGxldCBbbW9udGgsIHllYXJdID0gY29udHJvbC52YWx1ZS5zcGxpdCgvW1xcc1xcL10rLywgMik7XG5cbiAgICAgIGlmICgoeWVhciAhPSBudWxsID8geWVhci5sZW5ndGggOiB2b2lkIDApID09PSAyICYmIC9eXFxkKyQvLnRlc3QoeWVhcikpIHtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkuc2xpY2UoMCwgMik7XG4gICAgICAgIHllYXIgPSBwcmVmaXggKyB5ZWFyO1xuICAgICAgfVxuXG4gICAgICBtb250aCA9IHBhcnNlSW50KG1vbnRoLCAxMCkudG9TdHJpbmcoKTtcbiAgICAgIHllYXIgPSBwYXJzZUludCh5ZWFyLCAxMCkudG9TdHJpbmcoKTtcblxuICAgICAgaWYgKC9eXFxkKyQvLnRlc3QobW9udGgpICYmIC9eXFxkKyQvLnRlc3QoeWVhcikgJiYgKG1vbnRoID49IDEgJiYgbW9udGggPD0gMTIpKSB7XG4gICAgICAgIGNvbnN0IGV4cGlyeSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBleHBpcnkuc2V0TW9udGgoZXhwaXJ5LmdldE1vbnRoKCkgLSAxKTtcbiAgICAgICAgZXhwaXJ5LnNldE1vbnRoKGV4cGlyeS5nZXRNb250aCgpICsgMSwgMSk7XG5cbiAgICAgICAgaWYgKGV4cGlyeSA+IGN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge2V4cERhdGU6IHRydWV9O1xuICB9XG59XG5cbiJdfQ==