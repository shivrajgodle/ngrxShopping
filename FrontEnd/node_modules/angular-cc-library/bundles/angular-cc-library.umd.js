(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/forms'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('angular-cc-library', ['exports', '@angular/forms', '@angular/core', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['angular-cc-library'] = {}, global.ng.forms, global.ng.core, global.rxjs));
}(this, (function (exports, forms, core, rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var defaultFormat = /(\d{1,4})/g;
    var cards = [
        {
            type: 'maestro',
            patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67],
            format: defaultFormat,
            length: [12, 13, 14, 15, 16, 17, 18, 19],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'forbrugsforeningen',
            patterns: [600],
            format: defaultFormat,
            length: [16],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'dankort',
            patterns: [5019],
            format: defaultFormat,
            length: [16],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'visa',
            patterns: [4],
            format: defaultFormat,
            length: [13, 16, 19],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'mastercard',
            patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27],
            format: defaultFormat,
            length: [16],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'amex',
            patterns: [34, 37],
            format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
            length: [15],
            cvvLength: [3, 4],
            luhn: true,
        }, {
            type: 'dinersclub',
            patterns: [30, 36, 38, 39],
            format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
            length: [14],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'discover',
            patterns: [60, 64, 65, 622],
            format: defaultFormat,
            length: [16],
            cvvLength: [3],
            luhn: true,
        }, {
            type: 'unionpay',
            patterns: [62, 88],
            format: defaultFormat,
            length: [16, 17, 18, 19],
            cvvLength: [3],
            luhn: false,
        }, {
            type: 'jcb',
            patterns: [35],
            format: defaultFormat,
            length: [16, 19],
            cvvLength: [3],
            luhn: true,
        },
    ];
    // @dynamic
    var CreditCard = /** @class */ (function () {
        function CreditCard() {
        }
        CreditCard.cards = function () {
            return cards;
        };
        CreditCard.cardFromNumber = function (num) {
            num = (num + '').replace(/\D/g, '');
            for (var i = 0, len = cards.length; i < len; i++) {
                var card = cards[i];
                var ref = card.patterns;
                for (var j = 0, len1 = ref.length; j < len1; j++) {
                    var pattern = ref[j];
                    var p = pattern + '';
                    if (num.substr(0, p.length) === p) {
                        return card;
                    }
                }
            }
        };
        CreditCard.restrictNumeric = function (e) {
            if (e.metaKey || e.ctrlKey) {
                return true;
            }
            if (e.which === 32) {
                return false;
            }
            if (e.which === 0) {
                return true;
            }
            if (e.which < 33) {
                return true;
            }
            var input = String.fromCharCode(e.which);
            return !!/[\d\s]/.test(input);
        };
        CreditCard.hasTextSelected = function (target) {
            return target.selectionStart !== null && target.selectionStart !== target.selectionEnd;
        };
        CreditCard.cardType = function (num) {
            if (!num) {
                return num;
            }
            var card = this.cardFromNumber(num);
            if (card !== null && typeof card !== 'undefined') {
                return card.type;
            }
            else {
                return null;
            }
        };
        CreditCard.formatCardNumber = function (num) {
            num = num.replace(/\D/g, '');
            var card = this.cardFromNumber(num);
            if (!card) {
                return num;
            }
            var upperLength = card.length[card.length.length - 1];
            num = num.slice(0, upperLength);
            if (card.format.global) {
                var matches = num.match(card.format);
                if (matches != null) {
                    return matches.join(' ');
                }
            }
            else {
                var groups = card.format.exec(num);
                if (groups == null) {
                    return;
                }
                groups.shift();
                return groups.filter(Boolean).join(' ');
            }
        };
        CreditCard.safeVal = function (value, target, updateValue) {
            var cursor = null;
            var last = target.value;
            var result = null;
            try {
                cursor = target.selectionStart;
            }
            catch (error) { }
            updateValue(value);
            if (cursor !== null && target === document.activeElement) {
                if (cursor === last.length) {
                    cursor = value.length;
                }
                if (last !== value) {
                    var prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9);
                    var currPair = value.slice(cursor - 1, +cursor + 1 || 9e9);
                    var digit = value[cursor];
                    if (/\d/.test(digit) && prevPair === (digit + " ") && currPair === (" " + digit)) {
                        cursor = cursor + 1;
                    }
                }
                result = cursor;
            }
            return result;
        };
        CreditCard.isCardNumber = function (key, target) {
            var digit = String.fromCharCode(key);
            if (!/^\d+$/.test(digit)) {
                return false;
            }
            if (CreditCard.hasTextSelected(target)) {
                return true;
            }
            var value = (target.value + digit).replace(/\D/g, '');
            var card = CreditCard.cardFromNumber(value);
            if (card) {
                return value.length <= card.length[card.length.length - 1];
            }
            else {
                return value.length <= 16;
            }
        };
        CreditCard.restrictExpiry = function (key, target) {
            var digit = String.fromCharCode(key);
            if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
                return false;
            }
            var value = ("" + target.value + digit).replace(/\D/g, '');
            return value.length > 6;
        };
        CreditCard.replaceFullWidthChars = function (str) {
            if (str === null) {
                str = '';
            }
            var fullWidth = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19';
            var halfWidth = '0123456789';
            var value = '';
            var chars = str.split('');
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < chars.length; i++) {
                var chr = chars[i];
                var idx = fullWidth.indexOf(chr);
                if (idx > -1) {
                    chr = halfWidth[idx];
                }
                value += chr;
            }
            return value;
        };
        CreditCard.formatExpiry = function (expiry) {
            var parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/);
            if (!parts) {
                return '';
            }
            var mon = parts[1] || '';
            var sep = parts[2] || '';
            var year = parts[3] || '';
            if (year.length > 0) {
                sep = ' / ';
            }
            else if (sep === ' /') {
                mon = mon.substring(0, 1);
                sep = '';
            }
            else if (mon.length === 2 || sep.length > 0) {
                sep = ' / ';
            }
            else if (mon.length === 1 && (mon !== '0' && mon !== '1')) {
                mon = "0" + mon;
                sep = ' / ';
            }
            return "" + mon + sep + year;
        };
        CreditCard.restrictCvc = function (key, target) {
            var digit = String.fromCharCode(key);
            if (!/^\d+$/.test(digit) || this.hasTextSelected(target)) {
                return false;
            }
            var val = "" + target.value + digit;
            return val.length <= 4;
        };
        CreditCard.luhnCheck = function (num) {
            var digits = num.split('').reverse();
            var odd = true;
            var sum = 0;
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < digits.length; i++) {
                var digit = parseInt(digits[i], 10);
                // tslint:disable-next-line:no-conditional-assignment
                if ((odd = !odd)) {
                    digit *= 2;
                }
                if (digit > 9) {
                    digit -= 9;
                }
                sum += digit;
            }
            return sum % 10 === 0;
        };
        return CreditCard;
    }());

    var CreditCardValidators = /** @class */ (function () {
        function CreditCardValidators() {
        }
        CreditCardValidators.validateCCNumber = function (control) {
            if (forms.Validators.required(control) !== undefined && forms.Validators.required(control) !== null) {
                return { ccNumber: true };
            }
            var num = control.value.toString().replace(/\s+|-/g, '');
            if (!/^\d+$/.test(num)) {
                return { ccNumber: true };
            }
            var card = CreditCard.cardFromNumber(num);
            if (!card) {
                return { ccNumber: true };
            }
            if (card.length.includes(num.length) && (card.luhn === false || CreditCard.luhnCheck(num))) {
                return null;
            }
            var upperlength = card.length[card.length.length - 1];
            if (num.length > upperlength) {
                var registeredNum = num.substring(0, upperlength);
                if (CreditCard.luhnCheck(registeredNum)) {
                    return null;
                }
            }
            return { ccNumber: true };
        };
        CreditCardValidators.validateExpDate = function (control) {
            if (forms.Validators.required(control) !== undefined && forms.Validators.required(control) !== null) {
                return { expDate: true };
            }
            if (typeof control.value !== 'undefined' && control.value.length >= 5) {
                var _a = __read(control.value.split(/[\s\/]+/, 2), 2), month = _a[0], year = _a[1];
                if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                    var prefix = new Date().getFullYear().toString().slice(0, 2);
                    year = prefix + year;
                }
                month = parseInt(month, 10).toString();
                year = parseInt(year, 10).toString();
                if (/^\d+$/.test(month) && /^\d+$/.test(year) && (month >= 1 && month <= 12)) {
                    var expiry = new Date(year, month);
                    var currentTime = new Date();
                    expiry.setMonth(expiry.getMonth() - 1);
                    expiry.setMonth(expiry.getMonth() + 1, 1);
                    if (expiry > currentTime) {
                        return null;
                    }
                }
            }
            return { expDate: true };
        };
        return CreditCardValidators;
    }());

    var CreditCardFormatDirective = /** @class */ (function () {
        function CreditCardFormatDirective(el, control) {
            this.el = el;
            this.control = control;
            this.cards = CreditCard.cards();
            this.resolvedScheme$ = new rxjs.BehaviorSubject('unknown');
            this.target = this.el.nativeElement;
        }
        /**
         * Updates the value to target element, or FormControl if exists.
         * @param value New input value.
         */
        CreditCardFormatDirective.prototype.updateValue = function (value) {
            if (this.control) {
                this.control.control.setValue(value);
            }
            else {
                this.target.value = value;
            }
        };
        CreditCardFormatDirective.prototype.onKeypress = function (e) {
            if (CreditCard.restrictNumeric(e)) {
                if (CreditCard.isCardNumber(e.which, this.target)) {
                    this.formatCardNumber(e);
                }
            }
            else {
                e.preventDefault();
            }
        };
        CreditCardFormatDirective.prototype.onKeydown = function (e) {
            this.formatBackCardNumber(e);
            this.reFormatCardNumber();
        };
        CreditCardFormatDirective.prototype.onKeyup = function () {
            this.setCardType();
        };
        CreditCardFormatDirective.prototype.onPaste = function () {
            this.reFormatCardNumber();
        };
        CreditCardFormatDirective.prototype.onChange = function () {
            this.reFormatCardNumber();
        };
        CreditCardFormatDirective.prototype.onInput = function () {
            this.reFormatCardNumber();
            this.setCardType();
        };
        CreditCardFormatDirective.prototype.formatCardNumber = function (e) {
            var digit = String.fromCharCode(e.which);
            if (!/^\d+$/.test(digit)) {
                return;
            }
            var value = this.target.value;
            var card = CreditCard.cardFromNumber(value + digit);
            var length = (value.replace(/\D/g, '') + digit).length;
            var upperLength = card ? card.length[card.length.length - 1] : 19;
            if (length >= upperLength) {
                return;
            }
        };
        CreditCardFormatDirective.prototype.formatBackCardNumber = function (e) {
            var value = this.target.value;
            var selStart = this.target.selectionStart;
            if (e.which !== 8) {
                return;
            }
            if (selStart != null
                && selStart === this.target.selectionEnd
                && selStart > 0
                && selStart !== value.length
                && value[selStart - 1] === ' ') {
                e.preventDefault();
                if (selStart <= 2) {
                    this.updateValue(value.slice(selStart));
                    this.target.selectionStart = 0;
                    this.target.selectionEnd = 0;
                }
                else {
                    this.updateValue(value.slice(0, selStart - 2) + value.slice(selStart));
                    this.target.selectionStart = selStart - 2;
                    this.target.selectionEnd = selStart - 2;
                }
            }
        };
        CreditCardFormatDirective.prototype.setCardType = function () {
            var _this = this;
            var cardType = CreditCard.cardType(this.target.value) || 'unknown';
            this.resolvedScheme$.next(cardType);
            if (!this.target.classList.contains(cardType)) {
                this.cards.forEach(function (card) {
                    _this.target.classList.remove(card.type);
                });
                this.target.classList.remove('unknown');
                this.target.classList.add(cardType);
                this.target.classList.toggle('identified', cardType !== 'unknown');
            }
        };
        CreditCardFormatDirective.prototype.reFormatCardNumber = function () {
            var _this = this;
            var value = CreditCard.formatCardNumber(CreditCard.replaceFullWidthChars(this.target.value));
            var oldValue = this.target.value;
            if (value !== oldValue) {
                this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(value, this.target, (function (safeVal) {
                    _this.updateValue(safeVal);
                }));
            }
        };
        return CreditCardFormatDirective;
    }());
    CreditCardFormatDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ccNumber]',
                    exportAs: 'ccNumber',
                },] }
    ];
    CreditCardFormatDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: forms.NgControl, decorators: [{ type: core.Self }, { type: core.Optional }] }
    ]; };
    CreditCardFormatDirective.propDecorators = {
        onKeypress: [{ type: core.HostListener, args: ['keypress', ['$event'],] }],
        onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }],
        onKeyup: [{ type: core.HostListener, args: ['keyup',] }],
        onPaste: [{ type: core.HostListener, args: ['paste',] }],
        onChange: [{ type: core.HostListener, args: ['change',] }],
        onInput: [{ type: core.HostListener, args: ['input',] }]
    };

    var CvcFormatDirective = /** @class */ (function () {
        function CvcFormatDirective(el, control) {
            this.el = el;
            this.control = control;
            this.target = this.el.nativeElement;
        }
        /**
         * Updates the value to target element, or FormControl if exists.
         * @param value New input value.
         */
        CvcFormatDirective.prototype.updateValue = function (value) {
            if (this.control) {
                this.control.control.setValue(value);
            }
            else {
                this.target.value = value;
            }
        };
        CvcFormatDirective.prototype.onKeypress = function (e) {
            if (!CreditCard.restrictNumeric(e) && !CreditCard.restrictCvc(e.which, this.target)) {
                e.preventDefault();
            }
        };
        CvcFormatDirective.prototype.reformatCvc = function () {
            var _this = this;
            var val = CreditCard.replaceFullWidthChars(this.target.value)
                .replace(/\D/g, '')
                .slice(0, 4);
            var oldVal = this.target.value;
            if (val !== oldVal) {
                this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (function (safeVal) {
                    _this.updateValue(safeVal);
                }));
            }
        };
        return CvcFormatDirective;
    }());
    CvcFormatDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ccCVC]',
                },] }
    ];
    CvcFormatDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: forms.NgControl, decorators: [{ type: core.Self }, { type: core.Optional }] }
    ]; };
    CvcFormatDirective.propDecorators = {
        onKeypress: [{ type: core.HostListener, args: ['keypress', ['$event'],] }],
        reformatCvc: [{ type: core.HostListener, args: ['paste',] }, { type: core.HostListener, args: ['change',] }, { type: core.HostListener, args: ['input',] }]
    };

    var ExpiryFormatDirective = /** @class */ (function () {
        function ExpiryFormatDirective(el, control) {
            this.el = el;
            this.control = control;
            this.target = this.el.nativeElement;
        }
        /**
         * Updates the value to target element, or FormControl if exists.
         * @param value New input value.
         */
        ExpiryFormatDirective.prototype.updateValue = function (value) {
            if (this.control) {
                this.control.control.setValue(value);
            }
            else {
                this.target.value = value;
            }
        };
        ExpiryFormatDirective.prototype.onKeypress = function (e) {
            if (CreditCard.restrictNumeric(e)) {
                if (CreditCard.restrictExpiry(e.which, this.target)) {
                    this.formatExpiry(e);
                    this.formatForwardSlashAndSpace(e);
                    this.formatForwardExpiry(e);
                }
            }
            else {
                e.preventDefault();
                return false;
            }
        };
        ExpiryFormatDirective.prototype.onKeydown = function (e) {
            if (CreditCard.restrictNumeric(e) && CreditCard.restrictExpiry(e.which, this.target)) {
                this.formatBackExpiry(e);
            }
        };
        ExpiryFormatDirective.prototype.onChange = function () {
            this.reformatExpiry();
        };
        ExpiryFormatDirective.prototype.onInput = function () {
            this.reformatExpiry();
        };
        ExpiryFormatDirective.prototype.formatExpiry = function (e) {
            var digit = String.fromCharCode(e.which);
            var val = "" + this.target.value + digit;
            if (!/^\d+$/.test(digit)) {
                return;
            }
            if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
                e.preventDefault();
                this.updateValue("0" + val + " / ");
            }
            else if (/^\d\d$/.test(val)) {
                e.preventDefault();
                var m1 = parseInt(val[0], 10);
                var m2 = parseInt(val[1], 10);
                if (m2 > 2 && m1 !== 0) {
                    this.updateValue("0" + m1 + " / " + m2);
                }
                else {
                    this.updateValue(val + " / ");
                }
            }
        };
        ExpiryFormatDirective.prototype.formatForwardSlashAndSpace = function (e) {
            var which = String.fromCharCode(e.which);
            var val = this.target.value;
            if (!(which === '/' || which === ' ')) {
                return false;
            }
            if (/^\d$/.test(val) && val !== '0') {
                this.updateValue("0" + val + " / ");
            }
        };
        ExpiryFormatDirective.prototype.formatForwardExpiry = function (e) {
            var digit = String.fromCharCode(e.which);
            var val = this.target.value;
            if (!/^\d+$/.test(digit) && /^\d\d$/.test(val)) {
                this.updateValue(this.target.value = val + " / ");
            }
        };
        ExpiryFormatDirective.prototype.formatBackExpiry = function (e) {
            var val = this.target.valueOf;
            if (e.which !== 8) {
                return;
            }
            if ((this.target.selectionStart != null) && this.target.selectionStart !== val.length) {
                return;
            }
            if (/\d\s\/\s$/.test(val)) {
                e.preventDefault();
                this.updateValue(val.replace(/\d\s\/\s$/, ''));
            }
        };
        ExpiryFormatDirective.prototype.reformatExpiry = function () {
            var _this = this;
            var val = CreditCard.formatExpiry(CreditCard.replaceFullWidthChars(this.target.value));
            var oldVal = this.target.value;
            if (val !== oldVal) {
                this.target.selectionStart = this.target.selectionEnd = CreditCard.safeVal(val, this.target, (function (safeVal) {
                    _this.updateValue(safeVal);
                }));
            }
        };
        return ExpiryFormatDirective;
    }());
    ExpiryFormatDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ccExp]',
                },] }
    ];
    ExpiryFormatDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: forms.NgControl, decorators: [{ type: core.Self }, { type: core.Optional }] }
    ]; };
    ExpiryFormatDirective.propDecorators = {
        onKeypress: [{ type: core.HostListener, args: ['keypress', ['$event'],] }],
        onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }],
        onChange: [{ type: core.HostListener, args: ['change',] }],
        onInput: [{ type: core.HostListener, args: ['input',] }]
    };

    var CREDIT_CARD_LIBRARY_DIRECTIVES = [
        CreditCardFormatDirective,
        ExpiryFormatDirective,
        CvcFormatDirective,
    ];
    var CreditCardDirectivesModule = /** @class */ (function () {
        function CreditCardDirectivesModule() {
        }
        return CreditCardDirectivesModule;
    }());
    CreditCardDirectivesModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [CREDIT_CARD_LIBRARY_DIRECTIVES],
                    exports: [CREDIT_CARD_LIBRARY_DIRECTIVES],
                },] }
    ];

    /*
     * Public API Surface of angular-cc-library
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CreditCard = CreditCard;
    exports.CreditCardDirectivesModule = CreditCardDirectivesModule;
    exports.CreditCardFormatDirective = CreditCardFormatDirective;
    exports.CreditCardValidators = CreditCardValidators;
    exports.CvcFormatDirective = CvcFormatDirective;
    exports.ExpiryFormatDirective = ExpiryFormatDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-cc-library.umd.js.map
