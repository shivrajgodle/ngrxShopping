(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.paymentFormatter = factory());
}(this, (function () { 'use strict';

var DEFAULT_CVC_LENGTH = 3;
var DEFAULT_CARD_FORMAT = /(\d{1,4})/g;
var CARD_TYPES = [{
  type: 'amex',
  format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
  startPattern: /^3[47]/,
  maxCardNumberLength: 15,
  cvcLength: 4
}, {
  type: 'dankort',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^5019/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'hipercard',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(384100|384140|384160|606282|637095|637568|60(?!11))/,
  maxCardNumberLength: 19,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'dinersclub',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(36|38|30[0-5])/,
  maxCardNumberLength: 14,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'discover',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(6011|65|64[4-9]|622)/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'jcb',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^35/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'laser',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(6706|6771|6709)/,
  maxCardNumberLength: 19,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'maestro',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(5018|5020|5038|6304|6703|6708|6759|676[1-3])/,
  maxCardNumberLength: 19,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'mastercard',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'unionpay',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^62/,
  maxCardNumberLength: 19,
  cvcLength: DEFAULT_CVC_LENGTH,
  luhn: false
}, {
  type: 'visaelectron',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^4(026|17500|405|508|844|91[37])/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'elo',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^(4011(78|79)|43(1274|8935)|45(1416|7393|763(1|2))|50(4175|6699|67[0-7][0-9]|9000)|627780|63(6297|6368)|650(03([^4])|04([0-9])|05(0|1)|4(0[5-9]|3[0-9]|8[5-9]|9[0-9])|5([0-2][0-9]|3[0-8])|9([2-6][0-9]|7[0-8])|541|700|720|901)|651652|655000|655021)/,
  maxCardNumberLength: 16,
  cvcLength: DEFAULT_CVC_LENGTH
}, {
  type: 'visa',
  format: DEFAULT_CARD_FORMAT,
  startPattern: /^4/,
  maxCardNumberLength: 19,
  cvcLength: DEFAULT_CVC_LENGTH
}];
var EXPIRY_FORMAT = /(^[0-9]$|^(0[1-9]|10|11|12)$|^((0[1-9]|10|11|12)[0-9])$|^((0[1-9]|10|11|12)[0-9][0-9])$)/;
var INPUT_TYPE_CARD_NUMBER = 'cardNumber';
var INPUT_TYPE_CVC = 'cvc';
var INPUT_TYPE_EXPIRY = 'expiry';
var INPUT_TYPES = [INPUT_TYPE_CARD_NUMBER, INPUT_TYPE_CVC, INPUT_TYPE_EXPIRY];

var formatCardNumber = function formatCardNumber(cardNumber, format) {
  if (format.global) {
    return cardNumber.match(format).join(' ');
  }
  var execResult = format.exec(cardNumber.split(' ').join(''));
  if (execResult) {
    return execResult.splice(1, 3).filter(function (x) {
      return x;
    }).join(' ');
  }
  return cardNumber;
};
var formatExpiry = function formatExpiry(prevExpiry, e) {
  if (!prevExpiry) return null;
  var expiry = prevExpiry;
  if (/^[2-9]$/.test(expiry)) {
    expiry = '0' + expiry;
  }
  expiry = expiry.match(/(\d{1,2})/g);
  if (expiry.length === 1) {
    if (prevExpiry.includes('/')) {
      return expiry[0];
    }
    if (/\d{2}/.test(expiry)) {
      if (!e.data) {
        return expiry[0];
      }
      return expiry[0] + '/';
    }
  }
  return expiry.join('/');
};
var getCardTypeByValue = function getCardTypeByValue(value) {
  return CARD_TYPES.filter(function (cardType) {
    return cardType.startPattern.test(value);
  })[0];
};
var getCardTypeByType = function getCardTypeByType(type) {
  return CARD_TYPES.filter(function (cardType) {
    return cardType.type === type;
  })[0];
};
var hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue, currentValueLength) {
  var cardType = getCardTypeByValue(currentValue);
  return cardType && currentValueLength >= cardType.maxCardNumberLength;
};
var hasCVCReachedMaxLength = function hasCVCReachedMaxLength(type, currentValueLength) {
  var cardType = getCardTypeByType(type);
  if (!cardType) {
    return currentValueLength >= DEFAULT_CVC_LENGTH;
  }
  return currentValueLength >= cardType.cvcLength;
};
var isInputNumeric = function isInputNumeric(e) {
  return (/^[0-9]$/.test(e.key)
  );
};
var isInputValid = function isInputValid(e) {
  return !/^[a-zA-Z!@#\$%\^\&*\)\(+=._-]$/.test(e.key);
};
var isHighlighted = function isHighlighted() {
  return window.getSelection().type === 'Range';
};
var isKeyValid = function isKeyValid(key, value) {
  return !isInputNumeric({ key: key }) || EXPIRY_FORMAT.test(('' + value + key).replace('/', ''));
};

var formatInput = function formatInput(_ref) {
  var e = _ref.e,
      element = _ref.element,
      inputType = _ref.inputType,
      value = _ref.value;

  if (!value) {
    return null;
  }
  if (inputType === INPUT_TYPE_CARD_NUMBER) {
    var cardType = getCardTypeByValue(value);
    if (cardType) {
      element.value = formatCardNumber(value, cardType.format);
    }
  } else if (inputType === INPUT_TYPE_EXPIRY) {
    element.value = formatExpiry(value, e);
  }
  return null;
};
var restrictInput = function restrictInput(_ref2) {
  var e = _ref2.e,
      inputType = _ref2.inputType;

  var key = e.key;
  var value = e.target.value;
  if (!isInputValid(e) || inputType === INPUT_TYPE_EXPIRY && !isKeyValid(key, value) && !isHighlighted()) {
    e.preventDefault();
  }
};
var restrictLength = function restrictLength(_ref3) {
  var cardType = _ref3.cardType,
      e = _ref3.e,
      inputType = _ref3.inputType;

  var value = e.target.value;
  if (isHighlighted() || !isInputNumeric(e)) {
    return null;
  }
  if (inputType === INPUT_TYPE_CARD_NUMBER) {
    var valueLength = value.split(' ').join('').length;
    if (hasCardNumberReachedMaxLength(value, valueLength)) {
      e.preventDefault();
    }
  } else if (inputType === INPUT_TYPE_EXPIRY) {
    var _valueLength = value.split('/').join('').length;
    if (_valueLength >= 4) {
      e.preventDefault();
    }
  } else if (inputType === INPUT_TYPE_CVC) {
    var _valueLength2 = value.length;
    if (hasCVCReachedMaxLength(cardType, _valueLength2)) {
      e.preventDefault();
    }
  }
  return null;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var index = (function (_ref) {
  var cardType = _ref.cardType,
      inputType = _ref.inputType,
      selector = _ref.selector;

  if (cardType && typeof cardType !== 'string') {
    throw new TypeError('Expected `cardType` to be a string, got ' + (typeof cardType === 'undefined' ? 'undefined' : _typeof(cardType)));
  }
  if (typeof inputType !== 'string') {
    throw new TypeError('Expected `inputType` to be a string, got ' + (typeof inputType === 'undefined' ? 'undefined' : _typeof(inputType)));
  }
  if (typeof selector !== 'string') {
    throw new TypeError('Expected `selector` to be a string, got ' + (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)));
  }
  if (!INPUT_TYPES.includes(inputType)) {
    throw new Error('Expected `inputType` to be ' + INPUT_TYPES.join(',') + ' - got ' + inputType);
  }

  var element = document.querySelector(selector);
  element.addEventListener('keypress', function (e) {
    return e && restrictInput({ e: e, inputType: inputType });
  }, false);
  element.addEventListener('keypress', function (e) {
    return e && restrictLength({ cardType: cardType, e: e, inputType: inputType });
  }, false);
  element.addEventListener('input', function (e) {
    return e && formatInput({ e: e, element: element, inputType: inputType, value: e.target.value });
  }, false);

  return null;
});

return index;

})));
